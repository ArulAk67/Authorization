{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\naxios.defaults.baseURL = process.env.SERVER_DOMAIN;\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\nexport async function getUser({\n  username\n}) {\n  try {\n    const {\n      data\n    } = await axios.get(`/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\nexport async function registerUser(credentials) {\n  const res = await axios.post(\"/register\", {\n    username: credentials.username,\n    email: credentials.email\n  }).catch(err => console.log(err));\n  if (res.status === 201) {\n    await axios.post('/registerMail', {\n      username: credentials.username,\n      email: credentials.email,\n      text: res.msg\n    }).catch(err => console.log(err));\n  }\n  return res.msg;\n}\nexport async function verifyPassword({\n  username,\n  password\n}) {\n  if (username) {\n    const res = await axios.post('/login', {\n      username: username,\n      password: password\n    }).catch(err => console.log(err));\n    return res.data;\n  }\n}\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      await axios.post('/registerMail', {\n        username,\n        email: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\nexport async function verifyOTP({\n  username,\n  code\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/** reset password */\nexport async function resetPassword({\n  username,\n  password\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","defaults","baseURL","process","env","SERVER_DOMAIN","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","data","get","registerUser","credentials","res","email","catch","err","console","log","status","text","msg","verifyPassword","password","updateUser","response","put","headers","resolve","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["A:/MERN/login_signup/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\naxios.defaults.baseURL = process.env.SERVER_DOMAIN;\r\n\r\n\r\nexport async function getUsername(){\r\n    const token = localStorage.getItem('token')\r\n    if(!token) return Promise.reject(\"Cannot find Token\");\r\n    let decode = jwt_decode(token)\r\n    return decode;\r\n}\r\n\r\nexport async function authenticate(username){\r\n    try {\r\n        return await axios.post('/authenticate', { username })\r\n    } catch (error) {\r\n        return { error : \"Username doesn't exist...!\"}\r\n    }\r\n}\r\n\r\nexport async function getUser({ username }){\r\n    try {\r\n        const { data } = await axios.get(`/${username}`);\r\n        return { data };\r\n    } catch (error) {\r\n        return { error : \"Password doesn't Match...!\"}\r\n    }\r\n}\r\n\r\n\r\nexport async function registerUser(credentials){\r\n\r\n    const res= await axios.post(\"/register\",{\r\n        username:credentials.username,\r\n        email:credentials.email\r\n    }).catch((err)=>console.log(err));\r\n\r\n    if(res.status===201)\r\n    {\r\n        await axios.post('/registerMail', { username:credentials.username, email : credentials.email, text : res.msg})\r\n        .catch((err)=>console.log(err));   \r\n    }\r\n\r\n    return res.msg;\r\n}\r\n\r\nexport async function verifyPassword({ username, password }){\r\n    \r\n    if(username){\r\n        const res = await axios.post('/login', { username:username, password:password })\r\n        .catch((err)=>console.log(err))\r\n\r\n        return res.data;\r\n    }\r\n    \r\n}\r\n\r\nexport async function updateUser(response){\r\n    try {\r\n        \r\n        const token = await localStorage.getItem('token');\r\n        const data = await axios.put('/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\r\n\r\n        return Promise.resolve({ data })\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Couldn't Update Profile...!\"})\r\n    }\r\n}\r\n\r\n\r\nexport async function generateOTP(username){\r\n    try {\r\n        const {data : { code }, status } = await axios.get('/generateOTP', { params : { username }});\r\n\r\n        // send mail with the OTP\r\n        if(status === 201){\r\n            let { data : { email }} = await getUser({ username });\r\n            let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\r\n            await axios.post('/registerMail', { username, email: email, text, subject : \"Password Recovery OTP\"})\r\n        }\r\n        return Promise.resolve(code);\r\n    } catch (error) {\r\n        return Promise.reject({ error });\r\n    }\r\n}\r\n\r\nexport async function verifyOTP({ username, code }){\r\n    try {\r\n       const { data, status } = await axios.get('/verifyOTP', { params : { username, code }})\r\n       return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\n/** reset password */\r\nexport async function resetPassword({ username, password }){\r\n    try {\r\n        const { data, status } = await axios.put('/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status})\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AAEnCD,KAAK,CAACE,QAAQ,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,aAAa;AAGlD,OAAO,eAAeC,WAAWA,CAAA,EAAE;EAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAG,CAACF,KAAK,EAAE,OAAOG,OAAO,CAACC,MAAM,CAAC,mBAAmB,CAAC;EACrD,IAAIC,MAAM,GAAGZ,UAAU,CAACO,KAAK,CAAC;EAC9B,OAAOK,MAAM;AACjB;AAEA,OAAO,eAAeC,YAAYA,CAACC,QAAQ,EAAC;EACxC,IAAI;IACA,OAAO,MAAMf,KAAK,CAACgB,IAAI,CAAC,eAAe,EAAE;MAAED;IAAS,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAO;MAAEA,KAAK,EAAG;IAA4B,CAAC;EAClD;AACJ;AAEA,OAAO,eAAeC,OAAOA,CAAC;EAAEH;AAAS,CAAC,EAAC;EACvC,IAAI;IACA,MAAM;MAAEI;IAAK,CAAC,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAE,IAAGL,QAAS,EAAC,CAAC;IAChD,OAAO;MAAEI;IAAK,CAAC;EACnB,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZ,OAAO;MAAEA,KAAK,EAAG;IAA4B,CAAC;EAClD;AACJ;AAGA,OAAO,eAAeI,YAAYA,CAACC,WAAW,EAAC;EAE3C,MAAMC,GAAG,GAAE,MAAMvB,KAAK,CAACgB,IAAI,CAAC,WAAW,EAAC;IACpCD,QAAQ,EAACO,WAAW,CAACP,QAAQ;IAC7BS,KAAK,EAACF,WAAW,CAACE;EACtB,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAGC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EAEjC,IAAGH,GAAG,CAACM,MAAM,KAAG,GAAG,EACnB;IACI,MAAM7B,KAAK,CAACgB,IAAI,CAAC,eAAe,EAAE;MAAED,QAAQ,EAACO,WAAW,CAACP,QAAQ;MAAES,KAAK,EAAGF,WAAW,CAACE,KAAK;MAAEM,IAAI,EAAGP,GAAG,CAACQ;IAAG,CAAC,CAAC,CAC7GN,KAAK,CAAEC,GAAG,IAAGC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACnC;EAEA,OAAOH,GAAG,CAACQ,GAAG;AAClB;AAEA,OAAO,eAAeC,cAAcA,CAAC;EAAEjB,QAAQ;EAAEkB;AAAS,CAAC,EAAC;EAExD,IAAGlB,QAAQ,EAAC;IACR,MAAMQ,GAAG,GAAG,MAAMvB,KAAK,CAACgB,IAAI,CAAC,QAAQ,EAAE;MAAED,QAAQ,EAACA,QAAQ;MAAEkB,QAAQ,EAACA;IAAS,CAAC,CAAC,CAC/ER,KAAK,CAAEC,GAAG,IAAGC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;IAE/B,OAAOH,GAAG,CAACJ,IAAI;EACnB;AAEJ;AAEA,OAAO,eAAee,UAAUA,CAACC,QAAQ,EAAC;EACtC,IAAI;IAEA,MAAM3B,KAAK,GAAG,MAAMC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMS,IAAI,GAAG,MAAMnB,KAAK,CAACoC,GAAG,CAAC,aAAa,EAAED,QAAQ,EAAE;MAAEE,OAAO,EAAG;QAAE,eAAe,EAAI,UAAS7B,KAAM;MAAC;IAAC,CAAC,CAAC;IAE1G,OAAOG,OAAO,CAAC2B,OAAO,CAAC;MAAEnB;IAAK,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZ,OAAON,OAAO,CAACC,MAAM,CAAC;MAAEK,KAAK,EAAG;IAA6B,CAAC,CAAC;EACnE;AACJ;AAGA,OAAO,eAAesB,WAAWA,CAACxB,QAAQ,EAAC;EACvC,IAAI;IACA,MAAM;MAACI,IAAI,EAAG;QAAEqB;MAAK,CAAC;MAAEX;IAAO,CAAC,GAAG,MAAM7B,KAAK,CAACoB,GAAG,CAAC,cAAc,EAAE;MAAEqB,MAAM,EAAG;QAAE1B;MAAS;IAAC,CAAC,CAAC;;IAE5F;IACA,IAAGc,MAAM,KAAK,GAAG,EAAC;MACd,IAAI;QAAEV,IAAI,EAAG;UAAEK;QAAM;MAAC,CAAC,GAAG,MAAMN,OAAO,CAAC;QAAEH;MAAS,CAAC,CAAC;MACrD,IAAIe,IAAI,GAAI,iCAAgCU,IAAK,qCAAoC;MACrF,MAAMxC,KAAK,CAACgB,IAAI,CAAC,eAAe,EAAE;QAAED,QAAQ;QAAES,KAAK,EAAEA,KAAK;QAAEM,IAAI;QAAEY,OAAO,EAAG;MAAuB,CAAC,CAAC;IACzG;IACA,OAAO/B,OAAO,CAAC2B,OAAO,CAACE,IAAI,CAAC;EAChC,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACZ,OAAON,OAAO,CAACC,MAAM,CAAC;MAAEK;IAAM,CAAC,CAAC;EACpC;AACJ;AAEA,OAAO,eAAe0B,SAASA,CAAC;EAAE5B,QAAQ;EAAEyB;AAAK,CAAC,EAAC;EAC/C,IAAI;IACD,MAAM;MAAErB,IAAI;MAAEU;IAAO,CAAC,GAAG,MAAM7B,KAAK,CAACoB,GAAG,CAAC,YAAY,EAAE;MAAEqB,MAAM,EAAG;QAAE1B,QAAQ;QAAEyB;MAAK;IAAC,CAAC,CAAC;IACtF,OAAO;MAAErB,IAAI;MAAEU;IAAO,CAAC;EAC1B,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,OAAON,OAAO,CAACC,MAAM,CAACK,KAAK,CAAC;EAChC;AACJ;;AAEA;AACA,OAAO,eAAe2B,aAAaA,CAAC;EAAE7B,QAAQ;EAAEkB;AAAS,CAAC,EAAC;EACvD,IAAI;IACA,MAAM;MAAEd,IAAI;MAAEU;IAAO,CAAC,GAAG,MAAM7B,KAAK,CAACoC,GAAG,CAAC,gBAAgB,EAAE;MAAErB,QAAQ;MAAEkB;IAAS,CAAC,CAAC;IAClF,OAAOtB,OAAO,CAAC2B,OAAO,CAAC;MAAEnB,IAAI;MAAEU;IAAM,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACZ,OAAON,OAAO,CAACC,MAAM,CAAC;MAAEK;IAAM,CAAC,CAAC;EACpC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}