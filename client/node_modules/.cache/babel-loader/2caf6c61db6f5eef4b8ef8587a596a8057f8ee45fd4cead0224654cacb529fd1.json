{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\naxios.defaults.baseURL = \"http://localhost:5500/user\";\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/authenticate', {\n      username: username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\nexport async function getUser({\n  username\n}) {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      await axios.post('/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\nexport async function verifyPassword({\n  username,\n  password\n}) {\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      // await axios.post('/registerMail', { username, email: email, text, subject : \"Password Recovery OTP\"})\n    }\n\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\nexport async function verifyOTP({\n  username,\n  code\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/** reset password */\nexport async function resetPassword({\n  username,\n  password\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","defaults","baseURL","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","data","get","registerUser","credentials","msg","status","email","userEmail","text","resolve","verifyPassword","password","updateUser","response","put","headers","generateOTP","code","params","verifyOTP","resetPassword"],"sources":["A:/MERN/login_signup/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\naxios.defaults.baseURL = \"http://localhost:5500/user\";\r\n\r\n\r\nexport async function getUsername(){\r\n    const token = localStorage.getItem('token')\r\n    if(!token) return Promise.reject(\"Cannot find Token\");\r\n    let decode = jwt_decode(token)\r\n    return decode;\r\n}\r\n\r\nexport async function authenticate(username){\r\n    try {\r\n        return await axios.post('/authenticate', { username:username})\r\n    } catch (error) {\r\n        return { error : \"Username doesn't exist...!\"}\r\n    }\r\n}\r\n\r\nexport async function getUser({ username }){\r\n    try {\r\n        const { data } = await axios.get(`/api/user/${username}`);\r\n        return { data };\r\n    } catch (error) {\r\n        return { error : \"Password doesn't Match...!\"}\r\n    }\r\n}\r\n\r\n\r\n\r\nexport async function registerUser(credentials){\r\n    try {\r\n        const { data : { msg }, status } = await axios.post(`/register`, credentials);\r\n\r\n        let { username, email } = credentials;\r\n\r\n        /** send email */\r\n        if(status === 201){\r\n            await axios.post('/registerMail', { username, userEmail : email, text : msg})\r\n        }\r\n\r\n        return Promise.resolve(msg)\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\nexport async function verifyPassword({ username, password }){\r\n    \r\n    try {\r\n        if(username){\r\n            const { data } = await axios.post('/login', { username, password })\r\n            return Promise.resolve({ data });\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Password doesn't Match...!\"})\r\n    }\r\n    \r\n}\r\n\r\nexport async function updateUser(response){\r\n    try {\r\n        \r\n        const token = await localStorage.getItem('token');\r\n        const data = await axios.put('/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\r\n\r\n        return Promise.resolve({ data })\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Couldn't Update Profile...!\"})\r\n    }\r\n}\r\n\r\n\r\nexport async function generateOTP(username){\r\n    try {\r\n        const {data : { code }, status } = await axios.get('/generateOTP', { params : { username }});\r\n\r\n        // send mail with the OTP\r\n        if(status === 201){\r\n            let { data : { email }} = await getUser({ username });\r\n            let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\r\n            // await axios.post('/registerMail', { username, email: email, text, subject : \"Password Recovery OTP\"})\r\n        }\r\n        return Promise.resolve(code);\r\n    } catch (error) {\r\n        return Promise.reject({ error });\r\n    }\r\n}\r\n\r\nexport async function verifyOTP({ username, code }){\r\n    try {\r\n       const { data, status } = await axios.get('/verifyOTP', { params : { username, code }})\r\n       return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\n/** reset password */\r\nexport async function resetPassword({ username, password }){\r\n    try {\r\n        const { data, status } = await axios.put('/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status})\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}